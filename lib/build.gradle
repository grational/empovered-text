/*
 * This build file was auto generated by 'gigawatt'
 * @author d7392
 * @date 07-04-2024 11.17
 */

// [plugins] this block must be the first
plugins {
	// to use the 'api' keyword in dependencies
	id 'java-library'
	// support for groovy
	id 'groovy'
	// awesome git tag / gradle version integration
	id 'pl.allegro.tech.build.axion-release' version '1.14.+'
	// publish on a maven-compatible repository
	id 'maven-publish'
}

// [general] configuration
project.with {
	//project.name is set in the settings.gradle with rootProject.name
	group 'it.grational.text'
	version scmVersion.version
	description "A library for those who cannot afford enriched text!"
}

// [crosscompile] source and target java version
allprojects {
	targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
	mavenCentral()

	// leverage github as a maven repository
	maven { url 'https://jitpack.io' }
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = 'com.github.grational'
			artifactId = 'empovered-text'
			version = scmVersion.version // '0.5.0' (remove -SNAPSHOT for releases)
			from components.java
		}
	}
}

dependencies {
	// Groovy language support
	api (
		'org.codehaus.groovy:groovy:3.0.21',
		'org.jsoup:jsoup:1.17.2'
	)

	// We use the awesome Spock testing and specification framework
	testImplementation (
		"org.spockframework:spock-core:2.3-groovy-3.0",
		'net.bytebuddy:byte-buddy:1.+',
		'org.objenesis:objenesis:3.+'
	)
}

configurations.configureEach {
	resolutionStrategy {
		componentSelection {
			all { ComponentSelection selection ->
				String version = selection.candidate.version
				if (version ==~ /.*[-_.]?(alpha|beta).*/) {
					reject("Rejecting $version as it's an excluded version")
				}
			}
		}
	}
}

// [tasks] configuration //
release {
	// test everything before a release
	dependsOn 'test'
}

tasks.withType(Test) {
	useJUnitPlatform()
	maxParallelForks = Runtime.runtime.availableProcessors() / 2
}
task uniTest(type: Test) {
	description = 'unit tests task'
	exclude '**/*ISpec*'
	exclude '**/*FSpec*'
}
task intTest(type: Test) {
	description = 'integration tests task'
	exclude '**/*USpec*'
	exclude '**/*FSpec*'
}
task funTest(type: Test) {
	description = 'functional tests task'
	exclude '**/*USpec*'
	exclude '**/*ISpec*'
}
gradle.startParameter.excludedTaskNames += "uniTest"
gradle.startParameter.excludedTaskNames += "intTest"
gradle.startParameter.excludedTaskNames += "funTest"
// vim: ft=groovy:fdm=indent
